name:               eclair-lang
version:            0.2.0
synopsis: "Eclair: an experimental and minimal Datalog that compiles to LLVM."

description: "Eclair: an experimental and minimal Datalog that compiles to LLVM."

category:           Compiler
homepage:           github:luc-tielen/eclair-lang
author:             Luc Tielen
maintainer:         luc.tielen@gmail.com
copyright:          Luc Tielen, 2023
license:            BSD-3-Clause
license-file:       LICENSE
build-type:         Simple

extra-source-files:
  [
   cbits/semantic_analysis.dl
  , CHANGELOG.md
  , LICENSE
  , README.md
  ]

default-extensions:
  [
     DataKinds
    , DeriveAnyClass
    , DeriveFoldable
    , DeriveFunctor
    , DeriveGeneric
    , DeriveTraversable
    , DerivingStrategies
    , DerivingVia
    , FlexibleContexts
    , FlexibleInstances
    , KindSignatures
    , LambdaCase
    , OverloadedStrings
    , PatternSynonyms
    , RankNTypes
    , RecursiveDo
    , ScopedTypeVariables
    , TupleSections
    , TypeFamilies
    , ViewPatterns
  ]

ghc-options:
  [
    -Wall -Wincomplete-patterns -fhide-source-paths
    , -fno-show-valid-hole-fits -fno-sort-valid-hole-fits
  ]

cxx-options:
  [
    -std=c++17
    , -D__EMBEDDED_SOUFFLE__
    , -Wall
  ]

flags:
  debug:
    description: Enables stack traces.
    manual:      True
    default:     False

dependencies:
    base:
      mixin:
        - hiding (Prelude)
    algebraic-graphs: {}
    bytestring: {}
    comonad: {}
    containers: {}
    dependent-sum: {}
    diagnose: {}
    directory: {}
    dlist: {}
    exceptions: {}
    extra: {}
    ghc-prim: {}
    hermes-json: {}
    llvm-codegen: {}
    megaparsec: {}
    mmorph: {}
    mtl: {}
    optparse-applicative: {}
    parser-combinators: {}
    prettyprinter: {}
    prettyprinter-ansi-terminal: {}
    recursion-schemes: {}
    relude: {}
    rock: {}
    souffle-haskell: {}
    text: {}
    text-builder-linear: {}
    transformers: {}
    vector: {}

library:
  source-dirs:     [lib]
  when:
    - condition: os(darwin)
      extra-libraries: c++

    - condition: os(linux)
      extra-libraries: stdc++

    - condition: flag(debug)
      dependencies:
        haskell-stack-trace-plugin:
          version: ==0.1.3.0
      ghc-options:
        [ -fplugin=StackTrace.Plugin ]

executables:
  eclair:
    source-dirs: [ src/eclair ]
    main: Main.hs
    dependencies:
      eclair-lang: {}
    ghc-options:
      [
        -Wall,
        -Wincomplete-patterns,
        -fhide-source-paths,
        -fno-show-valid-hole-fits,
        -fno-sort-valid-hole-fits,
        -threaded,
        -rtsopts,
        -with-rtsopts=-N
      ]
    when:
      - condition: os(darwin)
        extra-libraries: c++

      - condition: os(linux)
        extra-libraries: stdc++

      - condition: flag(debug)
        ghc-options:
          [ -fplugin=StackTrace.Plugin ]
        dependencies:
          haskell-stack-trace-plugin:
            version: ==0.1.3.0
tests:
  eclair-test:
    main: test.hs
    source-dirs: [ tests/eclair ]
    dependencies:
      array: {}
      eclair-lang: {}
      filepath: {}
      hedgehog: {}
      hermes-json: {}
      hspec: {}
      hspec-discover: {}
      hspec-hedgehog: {}
      libffi: {}
      llvm-codegen: {}
      megaparsec: {}
      mmorph: {}
      mtl: {}
      neat-interpolation: {}
      random: {}
      silently: {}
      unix: {}
    ghc-options:
      [
        -Wall,
        -Wincomplete-patterns,
        -fhide-source-paths,
        -fno-show-valid-hole-fits,
        -fno-sort-valid-hole-fits,
      ]
